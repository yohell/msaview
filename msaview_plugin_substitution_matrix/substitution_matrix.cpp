/*
 * Written by Fredrik Lysholm
 *
 * Copyright (C) 2000 and later by Fredrik Lysholm
 *
 * The MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#include "substitution_matrix.h"

#include <cstddef>
#include <cstring>
#include <cstdlib>
#include <ctype.h>

substitution_matrix::substitution_matrix(const builtin_matrixes matrix) :
	vector_size(0),
	alphabet(NULL),
	index_lookup(NULL),
	matrix_lookup(NULL)
{
	load_builtin_matrix(matrix);
}
substitution_matrix::substitution_matrix(const char * matrix_file) :
	vector_size(0),
	alphabet(NULL),
	index_lookup(NULL),
	matrix_lookup(NULL)
{
	load(matrix_file);
}

substitution_matrix::~substitution_matrix()
{
	delete [] alphabet; alphabet = NULL;
	delete [] index_lookup; index_lookup = NULL;
	delete [] matrix_lookup; matrix_lookup = NULL;
}

/*
substitution_matrix::matrix_type substitution_matrix::lookup(const char a, substitution_matrix::matrix_type def) const
{
	int i = index_lookup[(unsigned char)a];

	return (i >= 0) ? (int) matrix_lookup [ i * vector_size + i ] : def;
}
*/

substitution_matrix::matrix_type substitution_matrix::lookup(const char a, const char b, substitution_matrix::matrix_type def) const
{
	int i = index_lookup[(unsigned char)a];
	int j = index_lookup[(unsigned char)b];

	return (i >= 0 && j >= 0) ? (int) matrix_lookup [ i * vector_size + j ] : def;
}

bool substitution_matrix::load(const char * file)
{
	FILE * fp = fopen(file, "r");
	if (fp == NULL)
	{
		fprintf(stderr, "ERROR: Unable to open %s for input!\n", file);
		return false;
	}

	int size = 1024;
	char buffer [ size ];

	delete [] alphabet; alphabet = NULL;
	delete [] index_lookup; index_lookup = NULL;
	delete [] matrix_lookup; matrix_lookup = NULL;

	while (! feof (fp) )
	{
		if (fgets(buffer, size, fp))
		{
			if (buffer[0] != '#')
			{
				if (index_lookup == NULL)
				{
					// load columns from amino acid row
					int s = 0;
					char amino_acids [ 256 ];
					char * p = buffer;
					while (*p != '\0')
					{
						if (*p != ' ' && *p != '\n')
						{
							amino_acids[s++] = *p;
						}
						++p;
					}

					// create index lookup
					index_lookup = new char [ 256 ];
					for (int i = 0; i < 256; ++i) index_lookup[i] = -1;

					alphabet = new char [ s + 1]; alphabet[s] = 0;

					// setup index lookup
					vector_size = s;
					for (int i = 0; i < s; ++i)
					{
						char c = amino_acids[i];
						index_lookup[(unsigned char)c] = i;
						index_lookup[tolower(c)] = i;
						alphabet[i] = c;
					}

					// create matrix lookup
					int msize = s * s;
					matrix_lookup = new matrix_type [ msize ];
					for (int i = 0; i < msize; ++i) matrix_lookup[i] = -1;
				}
				else
				{
					char * p = buffer;
					while (*p == ' ') ++p;

					if (*p != '\0')
					{
						char aa = *p;
						int i = index_lookup[(int)aa];
						if (i != -1)
						{
							int j = 0;
							int b = i * vector_size;

							char * endptr = p;
							char * end = buffer + strlen(buffer) - 1;
							while (endptr < end)
							{
								char * prev = endptr;
								double score = strtof(endptr, &endptr);
								if (endptr != prev)
								{
									matrix_lookup[ b + j ] = score;
									++j;
								}
								++endptr;
							}
						}
					}
				}
			}
		}
	}
	fclose(fp);

	return true;
}


bool substitution_matrix::save(const char * file) const
{
	FILE * out = fopen(file, "w");
	if (out == NULL)
	{
		fprintf(stderr, "ERROR: Unable to open %s for output!\n", file);
		return false;
	}

	// get lookup for amino acids
	char amino_acids [ vector_size ];
	for (int i = 32; i < 95; ++i)
	{
		int p = index_lookup[i];
		if (p != -1) amino_acids[p] = (char)i;
	}

	// write amino acids row
	fprintf(out, " ");
	for (int i = 0; i < vector_size; ++i)
	{
		fputs("  ", out);
		fputc(amino_acids[i], out);
	}
	fputc('\n', out);

	// write matrix rows
	for (int i = 0; i < vector_size; ++i)
	{
		fputc(amino_acids[i], out);

		int b = i * vector_size;
		for (int j = 0; j < vector_size; ++j)
		{
			fprintf(out, "% 3d", (int)matrix_lookup[b+j]);
		}
		fputc('\n', out);
	}

	fflush(out);
	fclose(out);

	return true;
}







static const char builtin_matrix_amino_acids [] =
{
	'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G',
	'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S',
	'T', 'W', 'Y', 'V', 'B', 'Z', 'X', '*',
};

static const short builtin_matrix [ ] [ 576 ] =
{
	{	// substitution_matrix::_BLOSUM30
//	     A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   4, -1,  0,  0, -3,  1,  0,  0, -2,  0, -1,  0,  1, -2, -1,  1,  1, -5, -4,  1,  0,  0,  0, -7,
/*R*/  -1,  8, -2, -1, -2,  3, -1, -2, -1, -3, -2,  1,  0, -1, -1, -1, -3,  0,  0, -1, -2,  0, -1, -7,
/*N*/   0, -2,  8,  1, -1, -1, -1,  0, -1,  0, -2,  0,  0, -1, -3,  0,  1, -7, -4, -2,  4, -1,  0, -7,
/*D*/   0, -1,  1,  9, -3, -1,  1, -1, -2, -4, -1,  0, -3, -5, -1,  0, -1, -4, -1, -2,  5,  0, -1, -7,
/*C*/  -3, -2, -1, -3, 17, -2,  1, -4, -5, -2,  0, -3, -2, -3, -3, -2, -2, -2, -6, -2, -2,  0, -2, -7,
/*Q*/   1,  3, -1, -1, -2,  8,  2, -2,  0, -2, -2,  0, -1, -3,  0, -1,  0, -1, -1, -3, -1,  4,  0, -7,
/*E*/   0, -1, -1,  1,  1,  2,  6, -2,  0, -3, -1,  2, -1, -4,  1,  0, -2, -1, -2, -3,  0,  5, -1, -7,
/*G*/   0, -2,  0, -1, -4, -2, -2,  8, -3, -1, -2, -1, -2, -3, -1,  0, -2,  1, -3, -3,  0, -2, -1, -7,
/*H*/  -2, -1, -1, -2, -5,  0,  0, -3, 14, -2, -1, -2,  2, -3,  1, -1, -2, -5,  0, -3, -2,  0, -1, -7,
/*I*/   0, -3,  0, -4, -2, -2, -3, -1, -2,  6,  2, -2,  1,  0, -3, -1,  0, -3, -1,  4, -2, -3,  0, -7,
/*L*/  -1, -2, -2, -1,  0, -2, -1, -2, -1,  2,  4, -2,  2,  2, -3, -2,  0, -2,  3,  1, -1, -1,  0, -7,
/*K*/   0,  1,  0,  0, -3,  0,  2, -1, -2, -2, -2,  4,  2, -1,  1,  0, -1, -2, -1, -2,  0,  1,  0, -7,
/*M*/   1,  0,  0, -3, -2, -1, -1, -2,  2,  1,  2,  2,  6, -2, -4, -2,  0, -3, -1,  0, -2, -1,  0, -7,
/*F*/  -2, -1, -1, -5, -3, -3, -4, -3, -3,  0,  2, -1, -2, 10, -4, -1, -2,  1,  3,  1, -3, -4, -1, -7,
/*P*/  -1, -1, -3, -1, -3,  0,  1, -1,  1, -3, -3,  1, -4, -4, 11, -1,  0, -3, -2, -4, -2,  0, -1, -7,
/*S*/   1, -1,  0,  0, -2, -1,  0,  0, -1, -1, -2,  0, -2, -1, -1,  4,  2, -3, -2, -1,  0, -1,  0, -7,
/*T*/   1, -3,  1, -1, -2,  0, -2, -2, -2,  0,  0, -1,  0, -2,  0,  2,  5, -5, -1,  1,  0, -1,  0, -7,
/*W*/  -5,  0, -7, -4, -2, -1, -1,  1, -5, -3, -2, -2, -3,  1, -3, -3, -5, 20,  5, -3, -5, -1, -2, -7,
/*Y*/  -4,  0, -4, -1, -6, -1, -2, -3,  0, -1,  3, -1, -1,  3, -2, -2, -1,  5,  9,  1, -3, -2, -1, -7,
/*V*/   1, -1, -2, -2, -2, -3, -3, -3, -3,  4,  1, -2,  0,  1, -4, -1,  1, -3,  1,  5, -2, -3,  0, -7,
/*B*/   0, -2,  4,  5, -2, -1,  0,  0, -2, -2, -1,  0, -2, -3, -2,  0,  0, -5, -3, -2,  5,  0, -1, -7,
/*Z*/   0,  0, -1,  0,  0,  4,  5, -2,  0, -3, -1,  1, -1, -4,  0, -1, -1, -1, -2, -3,  0,  4,  0, -7,
/*X*/   0, -1,  0, -1, -2,  0, -1, -1, -1,  0,  0,  0,  0, -1, -1,  0,  0, -2, -1,  0, -1,  0, -1, -7,
/***/  -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,  1,
	},
	{	// substitution_matrix::_BLOSUM40
//	     A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   5, -2, -1, -1, -2,  0, -1,  1, -2, -1, -2, -1, -1, -3, -2,  1,  0, -3, -2,  0, -1, -1,  0, -6,
/*R*/  -2,  9,  0, -1, -3,  2, -1, -3,  0, -3, -2,  3, -1, -2, -3, -1, -2, -2, -1, -2, -1,  0, -1, -6,
/*N*/  -1,  0,  8,  2, -2,  1, -1,  0,  1, -2, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  4,  0, -1, -6,
/*D*/  -1, -1,  2,  9, -2, -1,  2, -2,  0, -4, -3,  0, -3, -4, -2,  0, -1, -5, -3, -3,  6,  1, -1, -6,
/*C*/  -2, -3, -2, -2, 16, -4, -2, -3, -4, -4, -2, -3, -3, -2, -5, -1, -1, -6, -4, -2, -2, -3, -2, -6,
/*Q*/   0,  2,  1, -1, -4,  8,  2, -2,  0, -3, -2,  1, -1, -4, -2,  1, -1, -1, -1, -3,  0,  4, -1, -6,
/*E*/  -1, -1, -1,  2, -2,  2,  7, -3,  0, -4, -2,  1, -2, -3,  0,  0, -1, -2, -2, -3,  1,  5, -1, -6,
/*G*/   1, -3,  0, -2, -3, -2, -3,  8, -2, -4, -4, -2, -2, -3, -1,  0, -2, -2, -3, -4, -1, -2, -1, -6,
/*H*/  -2,  0,  1,  0, -4,  0,  0, -2, 13, -3, -2, -1,  1, -2, -2, -1, -2, -5,  2, -4,  0,  0, -1, -6,
/*I*/  -1, -3, -2, -4, -4, -3, -4, -4, -3,  6,  2, -3,  1,  1, -2, -2, -1, -3,  0,  4, -3, -4, -1, -6,
/*L*/  -2, -2, -3, -3, -2, -2, -2, -4, -2,  2,  6, -2,  3,  2, -4, -3, -1, -1,  0,  2, -3, -2, -1, -6,
/*K*/  -1,  3,  0,  0, -3,  1,  1, -2, -1, -3, -2,  6, -1, -3, -1,  0,  0, -2, -1, -2,  0,  1, -1, -6,
/*M*/  -1, -1, -2, -3, -3, -1, -2, -2,  1,  1,  3, -1,  7,  0, -2, -2, -1, -2,  1,  1, -3, -2,  0, -6,
/*F*/  -3, -2, -3, -4, -2, -4, -3, -3, -2,  1,  2, -3,  0,  9, -4, -2, -1,  1,  4,  0, -3, -4, -1, -6,
/*P*/  -2, -3, -2, -2, -5, -2,  0, -1, -2, -2, -4, -1, -2, -4, 11, -1,  0, -4, -3, -3, -2, -1, -2, -6,
/*S*/   1, -1,  1,  0, -1,  1,  0,  0, -1, -2, -3,  0, -2, -2, -1,  5,  2, -5, -2, -1,  0,  0,  0, -6,
/*T*/   0, -2,  0, -1, -1, -1, -1, -2, -2, -1, -1,  0, -1, -1,  0,  2,  6, -4, -1,  1,  0, -1,  0, -6,
/*W*/  -3, -2, -4, -5, -6, -1, -2, -2, -5, -3, -1, -2, -2,  1, -4, -5, -4, 19,  3, -3, -4, -2, -2, -6,
/*Y*/  -2, -1, -2, -3, -4, -1, -2, -3,  2,  0,  0, -1,  1,  4, -3, -2, -1,  3,  9, -1, -3, -2, -1, -6,
/*V*/   0, -2, -3, -3, -2, -3, -3, -4, -4,  4,  2, -2,  1,  0, -3, -1,  1, -3, -1,  5, -3, -3, -1, -6,
/*B*/  -1, -1,  4,  6, -2,  0,  1, -1,  0, -3, -3,  0, -3, -3, -2,  0,  0, -4, -3, -3,  5,  2, -1, -6,
/*Z*/  -1,  0,  0,  1, -3,  4,  5, -2,  0, -4, -2,  1, -2, -4, -1,  0, -1, -2, -2, -3,  2,  5, -1, -6,
/*X*/   0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1,  0, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -6,
/***/  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1,
	},
	{	// substitution_matrix::_BLOSUM50
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -2, -1, -1, -3, -1,  1,  0, -3, -2,  0, -2, -1, -1, -5,
/*R*/  -2,  7, -1, -2, -4,  1,  0, -3,  0, -4, -3,  3, -2, -3, -3, -1, -1, -3, -1, -3, -1,  0, -1, -5,
/*N*/  -1, -1,  7,  2, -2,  0,  0,  0,  1, -3, -4,  0, -2, -4, -2,  1,  0, -4, -2, -3,  4,  0, -1, -5,
/*D*/  -2, -2,  2,  8, -4,  0,  2, -1, -1, -4, -4, -1, -4, -5, -1,  0, -1, -5, -3, -4,  5,  1, -1, -5,
/*C*/  -1, -4, -2, -4, 13, -3, -3, -3, -3, -2, -2, -3, -2, -2, -4, -1, -1, -5, -3, -1, -3, -3, -2, -5,
/*Q*/  -1,  1,  0,  0, -3,  7,  2, -2,  1, -3, -2,  2,  0, -4, -1,  0, -1, -1, -1, -3,  0,  4, -1, -5,
/*E*/  -1,  0,  0,  2, -3,  2,  6, -3,  0, -4, -3,  1, -2, -3, -1, -1, -1, -3, -2, -3,  1,  5, -1, -5,
/*G*/   0, -3,  0, -1, -3, -2, -3,  8, -2, -4, -4, -2, -3, -4, -2,  0, -2, -3, -3, -4, -1, -2, -2, -5,
/*H*/  -2,  0,  1, -1, -3,  1,  0, -2, 10, -4, -3,  0, -1, -1, -2, -1, -2, -3,  2, -4,  0,  0, -1, -5,
/*I*/  -1, -4, -3, -4, -2, -3, -4, -4, -4,  5,  2, -3,  2,  0, -3, -3, -1, -3, -1,  4, -4, -3, -1, -5,
/*L*/  -2, -3, -4, -4, -2, -2, -3, -4, -3,  2,  5, -3,  3,  1, -4, -3, -1, -2, -1,  1, -4, -3, -1, -5,
/*K*/  -1,  3,  0, -1, -3,  2,  1, -2,  0, -3, -3,  6, -2, -4, -1,  0, -1, -3, -2, -3,  0,  1, -1, -5,
/*M*/  -1, -2, -2, -4, -2,  0, -2, -3, -1,  2,  3, -2,  7,  0, -3, -2, -1, -1,  0,  1, -3, -1, -1, -5,
/*F*/  -3, -3, -4, -5, -2, -4, -3, -4, -1,  0,  1, -4,  0,  8, -4, -3, -2,  1,  4, -1, -4, -4, -2, -5,
/*P*/  -1, -3, -2, -1, -4, -1, -1, -2, -2, -3, -4, -1, -3, -4, 10, -1, -1, -4, -3, -3, -2, -1, -2, -5,
/*S*/   1, -1,  1,  0, -1,  0, -1,  0, -1, -3, -3,  0, -2, -3, -1,  5,  2, -4, -2, -2,  0,  0, -1, -5,
/*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  2,  5, -3, -2,  0,  0, -1,  0, -5,
/*W*/  -3, -3, -4, -5, -5, -1, -3, -3, -3, -3, -2, -3, -1,  1, -4, -4, -3, 15,  2, -3, -5, -2, -3, -5,
/*Y*/  -2, -1, -2, -3, -3, -1, -2, -3,  2, -1, -1, -2,  0,  4, -3, -2, -2,  2,  8, -1, -3, -2, -1, -5,
/*V*/   0, -3, -3, -4, -1, -3, -3, -4, -4,  4,  1, -3,  1, -1, -3, -2,  0, -3, -1,  5, -4, -3, -1, -5,
/*B*/  -2, -1,  4,  5, -3,  0,  1, -1,  0, -4, -4,  0, -3, -4, -2,  0,  0, -5, -3, -4,  5,  2, -1, -5,
/*Z*/  -1,  0,  0,  1, -3,  4,  5, -2,  0, -3, -3,  1, -1, -4, -1,  0, -1, -2, -2, -3,  2,  5, -1, -5,
/*X*/  -1, -1, -1, -1, -2, -1, -1, -2, -1, -1, -1, -1, -1, -2, -2, -1,  0, -3, -1, -1, -1, -1, -1, -5,
/***/  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1,
	},
	{  // substitution_matrix::_BLOSUM62
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1,  0, -4,
/*R*/  -1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1,  0, -1, -4,
/*N*/  -2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4,
/*D*/  -2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1, -4,
/*C*/   0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4,
/*Q*/  -1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4,
/*E*/  -1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4,
/*G*/   0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4,
/*H*/  -2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4,
/*I*/  -1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4,
/*L*/  -1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4,
/*K*/  -1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4,
/*M*/  -1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3, -1, -1, -4,
/*F*/  -2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4,
/*P*/  -1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4,
/*S*/   1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0,  0,  0, -4,
/*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1,  0, -4,
/*W*/  -3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4,
/*Y*/  -2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4,
/*V*/   0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3, -2, -1, -4,
/*B*/  -2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4,
/*Z*/  -1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4,
/*X*/   0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4,
/***/  -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1,
	},
	{  // substitution_matrix::_BLOSUM80
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   5, -2, -2, -2, -1, -1, -1,  0, -2, -2, -2, -1, -1, -3, -1,  1,  0, -3, -2,  0, -2, -1, -1, -6,
/*R*/  -2,  6, -1, -2, -4,  1, -1, -3,  0, -3, -3,  2, -2, -4, -2, -1, -1, -4, -3, -3, -1,  0, -1, -6,
/*N*/  -2, -1,  6,  1, -3,  0, -1, -1,  0, -4, -4,  0, -3, -4, -3,  0,  0, -4, -3, -4,  5,  0, -1, -6,
/*D*/  -2, -2,  1,  6, -4, -1,  1, -2, -2, -4, -5, -1, -4, -4, -2, -1, -1, -6, -4, -4,  5,  1, -1, -6,
/*C*/  -1, -4, -3, -4,  9, -4, -5, -4, -4, -2, -2, -4, -2, -3, -4, -2, -1, -3, -3, -1, -4, -4, -1, -6,
/*Q*/  -1,  1,  0, -1, -4,  6,  2, -2,  1, -3, -3,  1,  0, -4, -2,  0, -1, -3, -2, -3,  0,  4, -1, -6,
/*E*/  -1, -1, -1,  1, -5,  2,  6, -3,  0, -4, -4,  1, -2, -4, -2,  0, -1, -4, -3, -3,  1,  5, -1, -6,
/*G*/   0, -3, -1, -2, -4, -2, -3,  6, -3, -5, -4, -2, -4, -4, -3, -1, -2, -4, -4, -4, -1, -3, -1, -6,
/*H*/  -2,  0,  0, -2, -4,  1,  0, -3,  8, -4, -3, -1, -2, -2, -3, -1, -2, -3,  2, -4, -1,  0, -1, -6,
/*I*/  -2, -3, -4, -4, -2, -3, -4, -5, -4,  5,  1, -3,  1, -1, -4, -3, -1, -3, -2,  3, -4, -4, -1, -6,
/*L*/  -2, -3, -4, -5, -2, -3, -4, -4, -3,  1,  4, -3,  2,  0, -3, -3, -2, -2, -2,  1, -4, -3, -1, -6,
/*K*/  -1,  2,  0, -1, -4,  1,  1, -2, -1, -3, -3,  5, -2, -4, -1, -1, -1, -4, -3, -3, -1,  1, -1, -6,
/*M*/  -1, -2, -3, -4, -2,  0, -2, -4, -2,  1,  2, -2,  6,  0, -3, -2, -1, -2, -2,  1, -3, -1, -1, -6,
/*F*/  -3, -4, -4, -4, -3, -4, -4, -4, -2, -1,  0, -4,  0,  6, -4, -3, -2,  0,  3, -1, -4, -4, -1, -6,
/*P*/  -1, -2, -3, -2, -4, -2, -2, -3, -3, -4, -3, -1, -3, -4,  8, -1, -2, -5, -4, -3, -2, -2, -1, -6,
/*S*/   1, -1,  0, -1, -2,  0,  0, -1, -1, -3, -3, -1, -2, -3, -1,  5,  1, -4, -2, -2,  0,  0, -1, -6,
/*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -2, -1, -1, -2, -2,  1,  5, -4, -2,  0, -1, -1, -1, -6,
/*W*/  -3, -4, -4, -6, -3, -3, -4, -4, -3, -3, -2, -4, -2,  0, -5, -4, -4, 11,  2, -3, -5, -3, -1, -6,
/*Y*/  -2, -3, -3, -4, -3, -2, -3, -4,  2, -2, -2, -3, -2,  3, -4, -2, -2,  2,  7, -2, -3, -3, -1, -6,
/*V*/   0, -3, -4, -4, -1, -3, -3, -4, -4,  3,  1, -3,  1, -1, -3, -2,  0, -3, -2,  4, -4, -3, -1, -6,
/*B*/  -2, -1,  5,  5, -4,  0,  1, -1, -1, -4, -4, -1, -3, -4, -2,  0, -1, -5, -3, -4,  5,  0, -1, -6,
/*Z*/  -1,  0,  0,  1, -4,  4,  5, -3,  0, -4, -3,  1, -1, -4, -2,  0, -1, -3, -3, -3,  0,  5, -1, -6,
/*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6,
/***/  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1,
	},
	{  // substitution_matrix::_BLOSUM90
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   5, -2, -2, -3, -1, -1, -1,  0, -2, -2, -2, -1, -2, -3, -1,  1,  0, -4, -3, -1, -2, -1, -1, -6,
/*R*/  -2,  6, -1, -3, -5,  1, -1, -3,  0, -4, -3,  2, -2, -4, -3, -1, -2, -4, -3, -3, -2,  0, -1, -6,
/*N*/  -2, -1,  7,  1, -4,  0, -1, -1,  0, -4, -4,  0, -3, -4, -3,  0,  0, -5, -3, -4,  5, -1, -1, -6,
/*D*/  -3, -3,  1,  7, -5, -1,  1, -2, -2, -5, -5, -1, -4, -5, -3, -1, -2, -6, -4, -5,  5,  1, -1, -6,
/*C*/  -1, -5, -4, -5,  9, -4, -6, -4, -5, -2, -2, -4, -2, -3, -4, -2, -2, -4, -4, -2, -4, -5, -1, -6,
/*Q*/  -1,  1,  0, -1, -4,  7,  2, -3,  1, -4, -3,  1,  0, -4, -2, -1, -1, -3, -3, -3, -1,  5, -1, -6,
/*E*/  -1, -1, -1,  1, -6,  2,  6, -3, -1, -4, -4,  0, -3, -5, -2, -1, -1, -5, -4, -3,  1,  5, -1, -6,
/*G*/   0, -3, -1, -2, -4, -3, -3,  6, -3, -5, -5, -2, -4, -5, -3, -1, -3, -4, -5, -5, -2, -3, -1, -6,
/*H*/  -2,  0,  0, -2, -5,  1, -1, -3,  8, -4, -4, -1, -3, -2, -3, -2, -2, -3,  1, -4, -1,  0, -1, -6,
/*I*/  -2, -4, -4, -5, -2, -4, -4, -5, -4,  5,  1, -4,  1, -1, -4, -3, -1, -4, -2,  3, -5, -4, -1, -6,
/*L*/  -2, -3, -4, -5, -2, -3, -4, -5, -4,  1,  5, -3,  2,  0, -4, -3, -2, -3, -2,  0, -5, -4, -1, -6,
/*K*/  -1,  2,  0, -1, -4,  1,  0, -2, -1, -4, -3,  6, -2, -4, -2, -1, -1, -5, -3, -3, -1,  1, -1, -6,
/*M*/  -2, -2, -3, -4, -2,  0, -3, -4, -3,  1,  2, -2,  7, -1, -3, -2, -1, -2, -2,  0, -4, -2, -1, -6,
/*F*/  -3, -4, -4, -5, -3, -4, -5, -5, -2, -1,  0, -4, -1,  7, -4, -3, -3,  0,  3, -2, -4, -4, -1, -6,
/*P*/  -1, -3, -3, -3, -4, -2, -2, -3, -3, -4, -4, -2, -3, -4,  8, -2, -2, -5, -4, -3, -3, -2, -1, -6,
/*S*/   1, -1,  0, -1, -2, -1, -1, -1, -2, -3, -3, -1, -2, -3, -2,  5,  1, -4, -3, -2,  0, -1, -1, -6,
/*T*/   0, -2,  0, -2, -2, -1, -1, -3, -2, -1, -2, -1, -1, -3, -2,  1,  6, -4, -2, -1, -1, -1, -1, -6,
/*W*/  -4, -4, -5, -6, -4, -3, -5, -4, -3, -4, -3, -5, -2,  0, -5, -4, -4, 11,  2, -3, -6, -4, -1, -6,
/*Y*/  -3, -3, -3, -4, -4, -3, -4, -5,  1, -2, -2, -3, -2,  3, -4, -3, -2,  2,  8, -3, -4, -3, -1, -6,
/*V*/  -1, -3, -4, -5, -2, -3, -3, -5, -4,  3,  0, -3,  0, -2, -3, -2, -1, -3, -3,  5, -4, -3, -1, -6,
/*B*/  -2, -2,  5,  5, -4, -1,  1, -2, -1, -5, -5, -1, -4, -4, -3,  0, -1, -6, -4, -4,  5,  0, -1, -6,
/*Z*/  -1,  0, -1,  1, -5,  5,  5, -3,  0, -4, -4,  1, -2, -4, -2, -1, -1, -4, -3, -3,  0,  5, -1, -6,
/*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6,
/***/  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1,
	},
	{  // substitution_matrix::_PAM30
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   6, -7, -4, -3, -6, -4, -2, -2, -7, -5, -6, -7, -5, -8, -2,  0, -1,-13, -8, -2, -3, -3, -1,-17,
/*R*/  -7,  8, -6,-10, -8, -2, -9, -9, -2, -5, -8,  0, -4, -9, -4, -3, -6, -2,-10, -8, -7, -4, -1,-17,
/*N*/  -4, -6,  8,  2,-11, -3, -2, -3,  0, -5, -7, -1, -9, -9, -6,  0, -2, -8, -4, -8,  6, -3, -1,-17,
/*D*/  -3,-10,  2,  8,-14, -2,  2, -3, -4, -7,-12, -4,-11,-15, -8, -4, -5,-15,-11, -8,  6,  1, -1,-17,
/*C*/  -6, -8,-11,-14, 10,-14,-14, -9, -7, -6,-15,-14,-13,-13, -8, -3, -8,-15, -4, -6,-12,-14, -1,-17,
/*Q*/  -4, -2, -3, -2,-14,  8,  1, -7,  1, -8, -5, -3, -4,-13, -3, -5, -5,-13,-12, -7, -3,  6, -1,-17,
/*E*/  -2, -9, -2,  2,-14,  1,  8, -4, -5, -5, -9, -4, -7,-14, -5, -4, -6,-17, -8, -6,  1,  6, -1,-17,
/*G*/  -2, -9, -3, -3, -9, -7, -4,  6, -9,-11,-10, -7, -8, -9, -6, -2, -6,-15,-14, -5, -3, -5, -1,-17,
/*H*/  -7, -2,  0, -4, -7,  1, -5, -9,  9, -9, -6, -6,-10, -6, -4, -6, -7, -7, -3, -6, -1, -1, -1,-17,
/*I*/  -5, -5, -5, -7, -6, -8, -5,-11, -9,  8, -1, -6, -1, -2, -8, -7, -2,-14, -6,  2, -6, -6, -1,-17,
/*L*/  -6, -8, -7,-12,-15, -5, -9,-10, -6, -1,  7, -8,  1, -3, -7, -8, -7, -6, -7, -2, -9, -7, -1,-17,
/*K*/  -7,  0, -1, -4,-14, -3, -4, -7, -6, -6, -8,  7, -2,-14, -6, -4, -3,-12, -9, -9, -2, -4, -1,-17,
/*M*/  -5, -4, -9,-11,-13, -4, -7, -8,-10, -1,  1, -2, 11, -4, -8, -5, -4,-13,-11, -1,-10, -5, -1,-17,
/*F*/  -8, -9, -9,-15,-13,-13,-14, -9, -6, -2, -3,-14, -4,  9,-10, -6, -9, -4,  2, -8,-10,-13, -1,-17,
/*P*/  -2, -4, -6, -8, -8, -3, -5, -6, -4, -8, -7, -6, -8,-10,  8, -2, -4,-14,-13, -6, -7, -4, -1,-17,
/*S*/   0, -3,  0, -4, -3, -5, -4, -2, -6, -7, -8, -4, -5, -6, -2,  6,  0, -5, -7, -6, -1, -5, -1,-17,
/*T*/  -1, -6, -2, -5, -8, -5, -6, -6, -7, -2, -7, -3, -4, -9, -4,  0,  7,-13, -6, -3, -3, -6, -1,-17,
/*W*/ -13, -2, -8,-15,-15,-13,-17,-15, -7,-14, -6,-12,-13, -4,-14, -5,-13, 13, -5,-15,-10,-14, -1,-17,
/*Y*/  -8,-10, -4,-11, -4,-12, -8,-14, -3, -6, -7, -9,-11,  2,-13, -7, -6, -5, 10, -7, -6, -9, -1,-17,
/*V*/  -2, -8, -8, -8, -6, -7, -6, -5, -6,  2, -2, -9, -1, -8, -6, -6, -3,-15, -7,  7, -8, -6, -1,-17,
/*B*/  -3, -7,  6,  6,-12, -3,  1, -3, -1, -6, -9, -2,-10,-10, -7, -1, -3,-10, -6, -8,  6,  0, -1,-17,
/*Z*/  -3, -4, -3,  1,-14,  6,  6, -5, -1, -6, -7, -4, -5,-13, -4, -5, -6,-14, -9, -6,  0,  6, -1,-17,
/*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-17,
/***/ -17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,  1,
	},
	{  // substitution_matrix::_PAM70
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   5, -4, -2, -1, -4, -2, -1,  0, -4, -2, -4, -4, -3, -6,  0,  1,  1, -9, -5, -1, -1, -1, -1,-11,
/*R*/  -4,  8, -3, -6, -5,  0, -5, -6,  0, -3, -6,  2, -2, -7, -2, -1, -4,  0, -7, -5, -4, -2, -1,-11,
/*N*/  -2, -3,  6,  3, -7, -1,  0, -1,  1, -3, -5,  0, -5, -6, -3,  1,  0, -6, -3, -5,  5, -1, -1,-11,
/*D*/  -1, -6,  3,  6, -9,  0,  3, -1, -1, -5, -8, -2, -7,-10, -4, -1, -2,-10, -7, -5,  5,  2, -1,-11,
/*C*/  -4, -5, -7, -9,  9, -9, -9, -6, -5, -4,-10, -9, -9, -8, -5, -1, -5,-11, -2, -4, -8, -9, -1,-11,
/*Q*/  -2,  0, -1,  0, -9,  7,  2, -4,  2, -5, -3, -1, -2, -9, -1, -3, -3, -8, -8, -4, -1,  5, -1,-11,
/*E*/  -1, -5,  0,  3, -9,  2,  6, -2, -2, -4, -6, -2, -4, -9, -3, -2, -3,-11, -6, -4,  2,  5, -1,-11,
/*G*/   0, -6, -1, -1, -6, -4, -2,  6, -6, -6, -7, -5, -6, -7, -3,  0, -3,-10, -9, -3, -1, -3, -1,-11,
/*H*/  -4,  0,  1, -1, -5,  2, -2, -6,  8, -6, -4, -3, -6, -4, -2, -3, -4, -5, -1, -4,  0,  1, -1,-11,
/*I*/  -2, -3, -3, -5, -4, -5, -4, -6, -6,  7,  1, -4,  1,  0, -5, -4, -1, -9, -4,  3, -4, -4, -1,-11,
/*L*/  -4, -6, -5, -8,-10, -3, -6, -7, -4,  1,  6, -5,  2, -1, -5, -6, -4, -4, -4,  0, -6, -4, -1,-11,
/*K*/  -4,  2,  0, -2, -9, -1, -2, -5, -3, -4, -5,  6,  0, -9, -4, -2, -1, -7, -7, -6, -1, -2, -1,-11,
/*M*/  -3, -2, -5, -7, -9, -2, -4, -6, -6,  1,  2,  0, 10, -2, -5, -3, -2, -8, -7,  0, -6, -3, -1,-11,
/*F*/  -6, -7, -6,-10, -8, -9, -9, -7, -4,  0, -1, -9, -2,  8, -7, -4, -6, -2,  4, -5, -7, -9, -1,-11,
/*P*/   0, -2, -3, -4, -5, -1, -3, -3, -2, -5, -5, -4, -5, -7,  7,  0, -2, -9, -9, -3, -4, -2, -1,-11,
/*S*/   1, -1,  1, -1, -1, -3, -2,  0, -3, -4, -6, -2, -3, -4,  0,  5,  2, -3, -5, -3,  0, -2, -1,-11,
/*T*/   1, -4,  0, -2, -5, -3, -3, -3, -4, -1, -4, -1, -2, -6, -2,  2,  6, -8, -4, -1, -1, -3, -1,-11,
/*W*/  -9,  0, -6,-10,-11, -8,-11,-10, -5, -9, -4, -7, -8, -2, -9, -3, -8, 13, -3,-10, -7,-10, -1,-11,
/*Y*/  -5, -7, -3, -7, -2, -8, -6, -9, -1, -4, -4, -7, -7,  4, -9, -5, -4, -3,  9, -5, -4, -7, -1,-11,
/*V*/  -1, -5, -5, -5, -4, -4, -4, -3, -4,  3,  0, -6,  0, -5, -3, -3, -1,-10, -5,  6, -5, -4, -1,-11,
/*B*/  -1, -4,  5,  5, -8, -1,  2, -1,  0, -4, -6, -1, -6, -7, -4,  0, -1, -7, -4, -5,  5,  1, -1,-11,
/*Z*/  -1, -2, -1,  2, -9,  5,  5, -3,  1, -4, -4, -2, -3, -9, -2, -2, -3,-10, -7, -4,  1,  5, -1,-11,
/*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-11,
/***/ -11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,  1,
	},
	{  // substitution_matrix::_PAM250
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   2, -2,  0,  0, -2,  0,  0,  1, -1, -1, -2, -1, -1, -3,  1,  1,  1, -6, -3,  0,  0,  0, -1, -8,
/*R*/  -2,  6,  0, -1, -4,  1, -1, -3,  2, -2, -3,  3,  0, -4,  0,  0, -1,  2, -4, -2, -1,  0, -1, -8,
/*N*/   0,  0,  2,  2, -4,  1,  1,  0,  2, -2, -3,  1, -2, -3,  0,  1,  0, -4, -2, -2,  2,  1, -1, -8,
/*D*/   0, -1,  2,  4, -5,  2,  3,  1,  1, -2, -4,  0, -3, -6, -1,  0,  0, -7, -4, -2,  3,  3, -1, -8,
/*C*/  -2, -4, -4, -5, 12, -5, -5, -3, -3, -2, -6, -5, -5, -4, -3,  0, -2, -8,  0, -2, -4, -5, -1, -8,
/*Q*/   0,  1,  1,  2, -5,  4,  2, -1,  3, -2, -2,  1, -1, -5,  0, -1, -1, -5, -4, -2,  1,  3, -1, -8,
/*E*/   0, -1,  1,  3, -5,  2,  4,  0,  1, -2, -3,  0, -2, -5, -1,  0,  0, -7, -4, -2,  3,  3, -1, -8,
/*G*/   1, -3,  0,  1, -3, -1,  0,  5, -2, -3, -4, -2, -3, -5,  0,  1,  0, -7, -5, -1,  0,  0, -1, -8,
/*H*/  -1,  2,  2,  1, -3,  3,  1, -2,  6, -2, -2,  0, -2, -2,  0, -1, -1, -3,  0, -2,  1,  2, -1, -8,
/*I*/  -1, -2, -2, -2, -2, -2, -2, -3, -2,  5,  2, -2,  2,  1, -2, -1,  0, -5, -1,  4, -2, -2, -1, -8,
/*L*/  -2, -3, -3, -4, -6, -2, -3, -4, -2,  2,  6, -3,  4,  2, -3, -3, -2, -2, -1,  2, -3, -3, -1, -8,
/*K*/  -1,  3,  1,  0, -5,  1,  0, -2,  0, -2, -3,  5,  0, -5, -1,  0,  0, -3, -4, -2,  1,  0, -1, -8,
/*M*/  -1,  0, -2, -3, -5, -1, -2, -3, -2,  2,  4,  0,  6,  0, -2, -2, -1, -4, -2,  2, -2, -2, -1, -8,
/*F*/  -3, -4, -3, -6, -4, -5, -5, -5, -2,  1,  2, -5,  0,  9, -5, -3, -3,  0,  7, -1, -4, -5, -1, -8,
/*P*/   1,  0,  0, -1, -3,  0, -1,  0,  0, -2, -3, -1, -2, -5,  6,  1,  0, -6, -5, -1, -1,  0, -1, -8,
/*S*/   1,  0,  1,  0,  0, -1,  0,  1, -1, -1, -3,  0, -2, -3,  1,  2,  1, -2, -3, -1,  0,  0, -1, -8,
/*T*/   1, -1,  0,  0, -2, -1,  0,  0, -1,  0, -2,  0, -1, -3,  0,  1,  3, -5, -3,  0,  0, -1, -1, -8,
/*W*/  -6,  2, -4, -7, -8, -5, -7, -7, -3, -5, -2, -3, -4,  0, -6, -2, -5, 17,  0, -6, -5, -6, -1, -8,
/*Y*/  -3, -4, -2, -4,  0, -4, -4, -5,  0, -1, -1, -4, -2,  7, -5, -3, -3,  0, 10, -2, -3, -4, -1, -8,
/*V*/   0, -2, -2, -2, -2, -2, -2, -1, -2,  4,  2, -2,  2, -1, -1, -1,  0, -6, -2,  4, -2, -2, -1, -8,
/*B*/   0, -1,  2,  3, -4,  1,  3,  0,  1, -2, -3,  1, -2, -4, -1,  0,  0, -5, -3, -2,  3,  2, -1, -8,
/*Z*/   0,  0,  1,  3, -5,  3,  3,  0,  2, -2, -3,  0, -2, -5,  0,  0, -1, -6, -4, -2,  2,  3, -1, -8,
/*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -8,
/***/  -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,  1,
	},
	{  // substitution_matrix::_GONNET
//		  A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/   2, -1,  0,  0,  0,  0,  0,  0, -1, -1, -1,  0, -1, -2,  0,  1,  1, -4, -2,  0, -1, -1,  0, -8,
/*R*/  -1,  5,  0,  0, -2,  2,  0, -1,  1, -2, -2,  3, -2, -3, -1,  0,  0, -2, -2, -2, -1, -1, -1, -8,
/*N*/   0,  0,  4,  2, -2,  1,  1,  0,  1, -3, -3,  1, -2, -3, -1,  1,  0, -4, -1, -2, -1, -1,  0, -8,
/*D*/   0,  0,  2,  5, -3,  1,  3,  0,  0, -4, -4,  0, -3, -4, -1,  0,  0, -5, -3, -3, -1, -1, -1, -8,
/*C*/   0, -2, -2, -3, 12, -2, -3, -2, -1, -1, -2, -3, -1, -1, -3,  0,  0, -1,  0,  0, -1, -1, -3, -8,
/*Q*/   0,  2,  1,  1, -2,  3,  2, -1,  1, -2, -2,  2, -1, -3,  0,  0,  0, -3, -2, -2, -1, -1, -1, -8,
/*E*/   0,  0,  1,  3, -3,  2,  4, -1,  0, -3, -3,  1, -2, -4,  0,  0,  0, -4, -3, -2, -1, -1, -1, -8,
/*G*/   0, -1,  0,  0, -2, -1, -1,  7, -1, -4, -4, -1, -4, -5, -2,  0, -1, -4, -4, -3, -1, -1, -1, -8,
/*H*/  -1,  1,  1,  0, -1,  1,  0, -1,  6, -2, -2,  1, -1,  0, -1,  0,  0, -1,  2, -2, -1, -1, -1, -8,
/*I*/  -1, -2, -3, -4, -1, -2, -3, -4, -2,  4,  3, -2,  2,  1, -3, -2, -1, -2, -1,  3, -1, -1, -1, -8,
/*L*/  -1, -2, -3, -4, -2, -2, -3, -4, -2,  3,  4, -2,  3,  2, -2, -2, -1, -1,  0,  2, -1, -1, -1, -8,
/*K*/   0,  3,  1,  0, -3,  2,  1, -1,  1, -2, -2,  3, -1, -3, -1,  0,  0, -4, -2, -2, -1, -1, -1, -8,
/*M*/  -1, -2, -2, -3, -1, -1, -2, -4, -1,  2,  3, -1,  4,  2, -2, -1, -1, -1,  0,  2, -1, -1, -1, -8,
/*F*/  -2, -3, -3, -4, -1, -3, -4, -5,  0,  1,  2, -3,  2,  7, -4, -3, -2,  4,  5,  0, -1, -1, -2, -8,
/*P*/   0, -1, -1, -1, -3,  0,  0, -2, -1, -3, -2, -1, -2, -4,  8,  0,  0, -5, -3, -2, -1, -1, -1, -8,
/*S*/   1,  0,  1,  0,  0,  0,  0,  0,  0, -2, -2,  0, -1, -3,  0,  2,  2, -3, -2, -1, -1, -1,  0, -8,
/*T*/   1,  0,  0,  0,  0,  0,  0, -1,  0, -1, -1,  0, -1, -2,  0,  2,  2, -4, -2,  0, -1, -1,  0, -8,
/*W*/  -4, -2, -4, -5, -1, -3, -4, -4, -1, -2, -1, -4, -1,  4, -5, -3, -4, 14,  4, -3, -1, -1, -4, -8,
/*Y*/  -2, -2, -1, -3,  0, -2, -3, -4,  2, -1,  0, -2,  0,  5, -3, -2, -2,  4,  8, -1, -1, -1, -2, -8,
/*V*/   0, -2, -2, -3,  0, -2, -2, -3, -2,  3,  2, -2,  2,  0, -2, -1,  0, -3, -1,  3, -1, -1, -1, -8,
/*B*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,
/*Z*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,
/*X*/   0, -1,  0, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1,  0,  0, -4, -2, -1, -1, -1, -1, -8,
/***/  -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -1, -1, -8,  1,
	},
    {  // substitution_matrix::_GONNET250
//		    A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *
/*A*/  24, -6, -3, -3,  5, -2,  0,  5, -8, -8,-12, -4, -7,-23,  3, 11,  6,-36,-22,  1,  0,  0,  0,-52,
/*R*/  -6, 47,  3, -3,-22, 15,  4,-10,  6,-24,-22, 27,-17,-32, -9, -2, -2,-16,-18,-20,  0,  0,  0,-52,
/*N*/  -3,  3, 38, 22,-18,  7,  9,  4, 12,-28,-30,  8,-22,-31, -9,  9,  5,-36,-14,-22,  0,  0,  0,-52,
/*D*/  -3, -3, 22, 47,-32,  9, 27,  1,  4,-38,-40,  5,-30,-45, -7,  5,  0,-52,-28,-29,  0,  0,  0,-52,
/*C*/   5,-22,-18,-32,115,-24,-30,-20,-13,-11,-15,-28, -9, -8,-31,  1, -5,-10, -5,  0,  0,  0,  0,-52,
/*Q*/  -2, 15,  7,  9,-24, 27, 17,-10, 12,-19,-16, 15,-10,-26, -2,  2,  0,-27,-17,-15,  0,  0,  0,-52,
/*E*/   0,  4,  9, 27,-30, 17, 36, -8,  4,-27,-28, 12,-20,-39, -5,  2, -1,-43,-27,-19,  0,  0,  0,-52,
/*G*/   5,-10,  4,  1,-20,-10, -8, 66,-14,-45,-44,-11,-35,-52,-16,  4,-11,-40,-40,-33,  0,  0,  0,-52,
/*H*/  -8,  6, 12,  4,-13, 12,  4,-14, 60,-22,-19,  6,-13, -1,-11, -2, -3, -8, 22,-20,  0,  0,  0,-52,
/*I*/  -8,-24,-28,-38,-11,-19,-27,-45,-22, 40, 28,-21, 25, 10,-26,-18, -6,-18, -7, 31,  0,  0,  0,-52,
/*L*/ -12,-22,-30,-40,-15,-16,-28,-44,-19, 28, 40,-21, 28, 20,-23,-21,-13, -7,  0, 18,  0,  0,  0,-52,
/*K*/  -4, 27,  8,  5,-28, 15, 12,-11,  6,-21,-21, 32,-14,-33, -6,  1,  1,-35,-21,-17,  0,  0,  0,-52,
/*M*/  -7,-17,-22,-30, -9,-10,-20,-35,-13, 25, 28,-14, 43, 16,-24,-14, -6,-10, -2, 16,  0,  0,  0,-52,
/*F*/ -23,-32,-31,-45, -8,-26,-39,-52, -1, 10, 20,-33, 16, 70,-38,-28,-22, 36, 51,  1,  0,  0,  0,-52,
/*P*/   3, -9, -9, -7,-31, -2, -5,-16,-11,-26,-23, -6,-24,-38, 76,  4,  1,-50,-31,-18,  0,  0,  0,-52,
/*S*/  11, -2,  9,  5,  1,  2,  2,  4, -2,-18,-21,  1,-14,-28,  4, 22, 15,-33,-19,-10,  0,  0,  0,-52,
/*T*/   6, -2,  5,  0, -5,  0, -1,-11, -3, -6,-13,  1, -6,-22,  1, 15, 25,-35,-19,  0,  0,  0,  0,-52,
/*W*/ -36,-16,-36,-52,-10,-27,-43,-40, -8,-18, -7,-35,-10, 36,-50,-33,-35,142, 41,-26,  0,  0,  0,-52,
/*Y*/ -22,-18,-14,-28, -5,-17,-27,-40, 22, -7,  0,-21, -2, 51,-31,-19,-19, 41, 78,-11,  0,  0,  0,-52,
/*V*/   1,-20,-22,-29,  0,-15,-19,-33,-20, 31, 18,-17, 16,  1,-18,-10,  0,-26,-11, 34,  0,  0,  0,-52,
/*B*/   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,-52,
/*Z*/   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,-52,
/*X*/   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,-52,
/***/ -52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52
    }
};


void substitution_matrix::load_builtin_matrix(const builtin_matrixes matrix)
{
	delete [] alphabet; alphabet = NULL;
	delete [] index_lookup; index_lookup = NULL;
	delete [] matrix_lookup; matrix_lookup = NULL;

	// create and clear a new index lookup
	index_lookup = new char [ 256 ];
	for (int i = 0; i < 256; ++i) index_lookup[i] = -1;

	vector_size = (int)sizeof(builtin_matrix_amino_acids);

	// setup alphabet
	alphabet = new char [ vector_size + 1 ]; alphabet[vector_size] = 0;

	// setup index lookup
	for (int i = 0; i < vector_size; ++i)
	{
		char c = builtin_matrix_amino_acids[i];
		index_lookup[(unsigned char)c] = i;
		index_lookup[tolower(c)] = i;
		alphabet[i] = c;
	}

	// setup matrix lookup
	matrix_lookup = new matrix_type [ sizeof(builtin_matrix[matrix]) ];
	for (int i = 0; i < (int)sizeof(builtin_matrix[matrix]); ++i) matrix_lookup[i] = builtin_matrix[matrix][i];
}

void substitution_matrix::print_matrix_as_code(FILE * out) const
{
	int size = (int)sizeof(builtin_matrix_amino_acids);
	fputs(",\n\t{  // substitution_matrix::_[ENTER_NAME_HERE]\n//\t\t", out);
	for (int i = 0; i < size; ++i)
	{
		fputs(i == 0 ? "  " : "   ", out);
		fputc(builtin_matrix_amino_acids[i], out);
	}
	fputs("\n", out);
	for (int i = 0; i < size; ++i)
	{
		fprintf(out, "/*%c*/ ", builtin_matrix_amino_acids[i]);
		for (int j = 0; j < size; ++j) fprintf(out, "% 3d,", (int)lookup(builtin_matrix_amino_acids[i], builtin_matrix_amino_acids[j], i == j ? 1 : -1));
		fputs("\n", out);
	}
	fputs("\t}\n", out);
}
